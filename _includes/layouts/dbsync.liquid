{% include 'parts/head.liquid' %}


<!-- Netlify Identity Login Status -->
<div data-netlify-identity-menu class="float-right"></div><br>

<section class="container">
    <div class="row space-100">
        <!-- Individual Data -->
        <div class="individual-fetch large-4 columns space-200-left">
            <div class="h6 strong text-orange space-min-bottom text-uppercase">fetch data</div>

            <!-- Categories History -->
            <div class="custom-dropdown select-wrapper position-relative space-25-top-bottom" style="width: 300px;">
                <a id="latest-category-link"
                    class="fetch-link cursor-pointer position-absolute fill-orange text-white space-50-left-right radius-min"
                    href="http://192.168.0.157:3000/categories" target="_blank">Fetch Latest</a>
                <label title="Select version to open" id="categories-label"
                    class="dropdown-label strong large-12 fill-blue cursor-pointer block space-50 radius-min">
                    CATEGORIES <span style="float: right;">&#9662;</span></label>
                <div id="categories-history" class="dropdown-content hidden">
                    <!-- File list will be populated here -->
                </div>
            </div><br>

            <!-- Products History -->
            <div class="custom-dropdown select-wrapper position-relative space-25-top-bottom" style="width: 300px;">
                <a id="latest-product-link"
                    class="fetch-link cursor-pointer position-absolute fill-orange text-white space-50-left-right radius-min"
                    href="http://192.168.0.157:3000/variations" target="_blank">Fetch Latest</a>
                <label title="Select version to open" id="products-label"
                    class="dropdown-label strong large-12 fill-blue cursor-pointer block space-50 radius-min"> PRODUCTS
                    <span style="float: right;">&#9662;</span></label>
                <div id="products-history" class="dropdown-content hidden">
                    <!-- File list will be populated here -->
                </div>
            </div><br>

            <!-- Users History -->
            <div class="custom-dropdown select-wrapper position-relative space-25-top-bottom" style="width: 300px;">
                <a id="latest-user-link"
                    class="fetch-link cursor-pointer position-absolute fill-orange text-white space-50-left-right radius-min"
                    href="http://192.168.0.157:3000/users" target="_blank">Fetch Latest</a>
                <label title="Select version to open" id="users-label"
                    class="dropdown-label strong large-12 fill-blue cursor-pointer block space-50 radius-min"> USERS
                    <span style="float: right;">&#9662;</span></label>
                <div id="users-history" class="dropdown-content hidden">
                    <!-- File list will be populated here -->
                </div>
            </div><br>
        </div>

        <div class="mid-space large-3 columns"></div>

        <!-- Master Data -->
        <div class="master-fetch large-4 columns space-50-right">
            <div class="h6 strong text-orange space-min-bottom text-uppercase">master data</div>

            <!-- Categories Merge -->
            <div class="select-wrapper position-relative space-25-top-bottom" style="width: 300px;">
                <select title="Select any category version" id="categories-merge" class="strong fill-blue large-12">
                    <option class="text-neutral-1" disabled selected>CATEGORIES</option>
                </select>
            </div><br>

            <!-- Products Merge -->
            <div class="select-wrapper position-relative space-25-top-bottom" style="width: 300px;">
                <select title="Select any product version" id="products-merge" class="strong fill-blue large-12">
                    <option class="text-neutral-1" disabled selected>PRODUCTS</option>
                </select>
            </div><br>

            <!-- Users Merge -->
            {% comment %} <div class="select-wrapper position-relative space-25-top-bottom" style="width: 300px;">
                <select title="Select any user version" id="users-merge" class="strong fill-blue large-12">
                    <option class="text-neutral-1" disabled selected>USERS</option>
                </select>
            </div><br> {% endcomment %}

            <button id="merge-button" class="merge-button text-uppercase fill-orange float-right">merge</button>
        </div>

        <!-- Spinner -->
        <div id="spinner" class="text-center" style="display: none;">
            <div class="spinner"></div>
            <div class="p space-50-top">Generating master data, please wait...</div>
        </div>

        <!-- Toast -->
        {% comment %} <div id="toast" style="display: none;" class="toast">Master data has been successfully saved!
        </div> {% endcomment %}
    </div>
</section>


<script>
    // Fetching the history data
    fetch('http://192.168.0.157:3000/history')
        .then(response => response.json())
        .then(data => {
            const history = data.history;
            populateHistory(history);
            populateMergeSelects(history);
        })
        .catch(error => {
            console.error('Error fetching history:', error);
        });

    // Populate History Function
    function populateHistory(history) {
        // Categories
        const categoriesDiv = document.getElementById('categories-history');
        categoriesDiv.innerHTML = '';
        history.categories.forEach(file => {
            const item = document.createElement('div');
            item.classList.add('dropdown-item');
            item.classList.add('fill-blue');
            item.textContent = file;
            item.addEventListener('click', () => {
                window.open(`http://192.168.0.157:3000/data/categories/${file}`, '_blank');
            });
            categoriesDiv.appendChild(item);
        });

        // Products
        const productsDiv = document.getElementById('products-history');
        productsDiv.innerHTML = '';
        history.variations.forEach(file => {
            const item = document.createElement('div');
            item.classList.add('dropdown-item');
            item.classList.add('fill-blue');
            item.textContent = file;
            item.addEventListener('click', () => {
                window.open(`http://192.168.0.157:3000/data/variations/${file}`, '_blank');
            });
            productsDiv.appendChild(item);
        });

        // Users
        // const usersDiv = document.getElementById('users-history');
        // usersDiv.innerHTML = '';
        // history.users.forEach(file => {
        //     const item = document.createElement('div');
        //     item.classList.add('dropdown-item');
        //     item.classList.add('fill-blue');
        //     item.textContent = file;
        //     item.addEventListener('click', () => {
        //         window.open(`http://192.168.0.157:3000/data/users/${file}`, '_blank');
        //     });
        //     usersDiv.appendChild(item);
        // });

        setupDropdownToggles();
    }

    // Setup the toggle behavior for each dropdown
    function setupDropdownToggles() {
        const categoriesLabel = document.getElementById('categories-label');
        const productsLabel = document.getElementById('products-label');
        // const usersLabel = document.getElementById('users-label');

        const categoriesHistory = document.getElementById('categories-history');
        const productsHistory = document.getElementById('products-history');
        // const usersHistory = document.getElementById('users-history');

        categoriesLabel.addEventListener('click', () => toggleDropdown(categoriesHistory, categoriesLabel));
        productsLabel.addEventListener('click', () => toggleDropdown(productsHistory, productsLabel));
        // usersLabel.addEventListener('click', () => toggleDropdown(usersHistory, usersLabel));
    }

    // Function to toggle dropdown visibility
    function toggleDropdown(dropdown, label) {
        const isVisible = dropdown.classList.contains('visible');

        // Set an explicit max-height so the transition applies on the first click
        if (!dropdown.style.maxHeight) {
            dropdown.style.maxHeight = '0';
        }

        // Show/Hide the clicked dropdown without affecting others
        if (!isVisible) {
            dropdown.classList.remove('hidden');
            dropdown.classList.add('visible');
            label.classList.add('active');
            dropdown.style.maxHeight = dropdown.scrollHeight + 'px';
        } else {
            dropdown.classList.remove('visible');
            dropdown.style.maxHeight = '0';
            label.classList.remove('active');
        }

        // Ensure dropdown gets hidden completely after transition
        dropdown.addEventListener('transitionend', () => {
            if (dropdown.style.maxHeight === '0px') {
                dropdown.classList.add('hidden');
            }
        }, { once: true });
    }

    // Populate merge selects
    const populateMergeSelects = (history) => {
        const categoriesMergeSelect = document.getElementById('categories-merge');
        const productsMergeSelect = document.getElementById('products-merge');
        // const usersMergeSelect = document.getElementById('users-merge');

        // Clear existing options except the default one
        categoriesMergeSelect.innerHTML = '<option class="text-neutral-1" disabled selected>CATEGORIES</option>';
        productsMergeSelect.innerHTML = '<option class="text-neutral-1" disabled selected>PRODUCTS</option>';
        // usersMergeSelect.innerHTML = '<option class="text-neutral-1" disabled selected>USERS</option>';

        // Populate categories
        history.categories.forEach(file => {
            const option = document.createElement('option');
            option.textContent = file;
            option.value = file;
            categoriesMergeSelect.appendChild(option);
        });

        // Populate products
        history.variations.forEach(file => {
            const option = document.createElement('option');
            option.textContent = file;
            option.value = file;
            productsMergeSelect.appendChild(option);
        });

        // Populate users
        // history.users.forEach(file => {
        //     const option = document.createElement('option');
        //     option.textContent = file;
        //     option.value = file;
        //     usersMergeSelect.appendChild(option);
        // });
    };

    // Merge Button Click Event
    document.getElementById('merge-button').addEventListener('click', function () {
        // Get selected values from dropdowns
        const categoriesMerge = Array.from(document.getElementById('categories-merge').selectedOptions).map(option => option.value);
        const productsMerge = Array.from(document.getElementById('products-merge').selectedOptions).map(option => option.value);
        // const usersMerge = Array.from(document.getElementById('users-merge').selectedOptions).map(option => option.value);

        // if (!categoriesMerge.length || !productsMerge.length || !usersMerge.length) {
        if (!categoriesMerge.length || !productsMerge.length) {
            alert('Please select all categories, products, and users before merging.');
            return;
        }

        // Show the spinner before starting the fetch
        document.getElementById('spinner').style.display = 'block';

        // Fetch the master endpoint without query parameters
        fetch('http://192.168.0.157:3000/master', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                categories: categoriesMerge,
                products: productsMerge,
                // users: usersMerge
            })
        })
            .then(response => {
                console.log('Fetch response:', response); // Log the full response for debugging
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then(data => {
                let message;
                if (data.success) {
                    message = "Files have been saved successfully!";
                    showToast(message, 'success'); // Show success toast
                } else {
                    throw new Error("Failed to merge data.");
                }
            })
            .catch(error => {
                console.error('Error merging data:', error); // Log the error
                if (error instanceof TypeError) {
                    console.error('Network error or CORS issue');
                }
                showToast("Error merging data. Please check the console for more details.", 'error');
            })
            .finally(() => {
                document.getElementById('spinner').style.display = 'none';
                // Reset selections
                document.getElementById('categories-merge').selectedIndex = 0;
                document.getElementById('products-merge').selectedIndex = 0;
                // document.getElementById('users-merge').selectedIndex = 0;
            });
    });

    // Function to show the toast notification
    // function showToast(message, type = 'success') {
    //     const toast = document.getElementById('toast');
    //     console.log(message); // Debug log

    //     // Set the toast message
    //     toast.textContent = message;

    //     // Apply color based on success or error
    //     if (type === 'error') {
    //         toast.style.backgroundColor = '#dc3545'; // Red for error
    //     } else {
    //         toast.style.backgroundColor = '#28a745'; // Green for success
    //     }

    //     // Display the toast
    //     toast.style.display = 'block';
    //     toast.classList.add('show');

    //     // Hide toast after 3 seconds
    //     setTimeout(() => {
    //         toast.classList.remove('show');
    //         toast.style.display = 'none';
    //     }, 3000);
    // }
</script>



<!-- Style -->
<style>
    .fetch-link {
        top: 20px;
        left: 130px;
    }

    .fetch-link:hover {
        color: #ededed;
    }

    .spinner {
        margin: auto;
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border-left-color: #09f;
        animation: spin 1s ease infinite;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* .toast {
        visibility: hidden;
        max-width: 50%;
        margin: 0 auto;
        background-color: #28a745;
        color: white;
        text-align: center;
        border-radius: 4px;
        padding: 12px;
        position: fixed;
        bottom: 10%;
        left: 50%;
        transform: translateX(-50%);
        z-index: 999999;
    }

    .toast.show {
        visibility: visible;
        animation: fadein 0.5s, fadeout 0.5s 2.5s;
    }

    @keyframes fadein {
        from {
            bottom: 0;
            opacity: 0;
        }

        to {
            bottom: 10%;
            opacity: 1;
        }
    }

    @keyframes fadeout {
        from {
            bottom: 10%;
            opacity: 1;
        }

        to {
            bottom: 0;
            opacity: 0;
        }
    } */

    .dropdown-content {
        max-height: 0;
        overflow: hidden;
        border-radius: 0;
        transition: max-height 0.3s ease-out;
    }

    .dropdown-content.visible {
        max-height: 300px;
        border-radius: 0 0 5px 5px;
    }

    .dropdown-item {
        padding: 13px 20px 13px 15px;
        cursor: pointer;
        font-size: 13px;
        transition: all 0.1s;
    }

    .dropdown-item:hover {
        background-color: #24afff;
    }

    .dropdown-label {
        border-radius: 5px;
    }

    .dropdown-label.active {
        border-radius: 5px 5px 0 0;
    }
</style>


{% include 'parts/foot.liquid' %}